"""/!\ If the script is ran multiple time, do not forget to delete the database created every time the script is run
or else, the successive database created will stack together!"""
from ase.db import connect  # Connects to an ase-database.
from ase.io import read  # Read structure in database.
from ase.build import bulk  # Used to create primitive lattice.
from ase.visualize import view
from icet.tools import enumerate_structures  # Brute force generation of all symmetrically non-equivalent lattice.
import matplotlib.pyplot as plt
from ase.build import surface  # Build surface using CE lattice.
plt.rc('font', size=14)

# prim: The lattice to use for the cluster expansion (CE); host: Host metal.; guest: Guest metal.
prim, host, guest = bulk('Pt'), 'Pt', 'Fe'

db_label = 'PtFe_to_be_calculated.db'  # Label of the database containing ALL structures.
db = connect(db_label)  # Will contain all structures generated by CE.

n_max_atoms = 8  # highest number of atoms in the cell.
target_ratio = 0.5  # Ratio to look for between both metals.

data = []

# Start from the pure Ag structure. Looks for every possible non-identical structure containing up to 6 atoms.
n_structures = 0  # Count the number of bulk cells built.
for structure in enumerate_structures(prim, range(n_max_atoms), [host, guest],
                                      concentration_restrictions={'Fe': (0.5, 0.5)}):
    db.write(structure)
    c_Pt = structure.get_chemical_symbols().count('Pt') / len(structure)
    # Captures the ratio of Pt atoms in each lattice generated.
    data.append(dict(c_Pt=c_Pt, natoms=len(structure)))
    n_structures += 1

print(f'CE finished. Number of supercell built: {n_structures}.\n')

atoms = read(db_label+'@'+str(20))  # To read a structure in ase-database: database_root + @ + str(index)
view(atoms)

slab = surface(lattice=atoms, indices=(1, 1, 1), layers=5, vacuum=10) * (1, 1, 1)  # Create a slab
view(slab)
